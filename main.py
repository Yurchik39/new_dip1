# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:
import time

import requests

import VKLong.VKLong.object
from config import BOT_TOKEN
from db.database import *
from VKLong.VKLong import Bot

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
user_token = input("–í–≤–µ–¥–∏—Ç–µ user-token, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π: ")

bot = Bot(token=BOT_TOKEN)
users_forms = {}


def search_users(user_id: int, city: int, sex: int) -> dict:
    """
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—á–∏—Ç—ã–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π
    :param city: –ì–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–¥–æ –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param sex: –ü–æ–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if sex == 1:
        sex = 2
    else:
        sex = 1

    try:
        response = requests.get(
            "https://api.vk.com/method/users.search",
            params={
                "count": 1000,
                "city": city,
                "sex": sex,
                "status": (1, 6),
                "age_from": 18,
                "access_token": user_token,
                "v": 5.131,
            },
        ).json()["response"]["items"]
    except KeyError:
        return None

    return response


def get_all_user_photos(user_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    """
    response = requests.get(
        "https://api.vk.com/method/photos.getAll",
        params={
            "owner_id": user_id,
            "extended": 1,
            "count": 100,
            "skip_hidden": 1,
            "access_token": user_token,
            "v": 5.131,
        },
    ).json().get('response')

    return response


def get_user_vk(user_id: int) -> dict:
    try:
        response = requests.get(
            "https://api.vk.com/method/users.get",
            params={
                "fields": "city,sex",
                "access_token": user_token,
                "v": 5.131,
            },
        ).json()['response'][0]
    except KeyError:
        return None

    return response


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:
@bot.get_updates
def on_update(event):
    # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
    if event.type != "message_new":
        return

    message = VKLong.VKLong.object.message_new(event.response)
    user_id: int = message.from_id
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    if message.from_id > 2000000000:
        return
    text: str = message.text.lower()
    is_exists = is_user_exists(user_id)

    if not is_exists:
        register_user(user_id)
        commit_db()

    if text in ("–ø–æ–∏—Å–∫", "üîé –ø–æ–∏—Å–∫"): 
        # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        finded_users_object = users_forms.get(user_id)
        if finded_users_object is not None:
            finded_users = finded_users_object["finded_users"]
        # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
        if finded_users_object is None or finded_users_object["last_time"] + 300 < time.time():
            current_user_info = get_user_vk(user_id)

            city = current_user_info.get("city")
            if city is None:
                bot.answer(
                    "ü§ö –£–ø—Å! –£ –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥!\n"
                    "\n"
                    "üëâ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                )
                return
            else:
                city = city["id"]

            sex = current_user_info.get("sex")
            if sex is None:
                bot.answer(
                    "ü§ö –£–ø—Å! –£ –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª!\n"
                    "\n"
                    "üëâ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                )
                return

            finded_users = search_users(user_id, city, sex)

            if finded_users is None:
                bot.answer(
                    "ü§ö –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!\n"
                    "\n"
                    "üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                )
                return

            users_forms[user_id] = {
                "finded_users": finded_users,
                "last_time": time.time()
            }

        for user_object in finded_users:
            if user_object["is_closed"]:
                continue

            finded_user_id = user_object['id']
            first_name = user_object['first_name']
            last_name = user_object['last_name']
            finded_link = f"vk.com/id{finded_user_id}"

            viewed_forms = get_user(user_id, "viewed_forms").split(",")
            viewed_forms = [int(i) for i in viewed_forms if i.isdigit()]
            if finded_user_id in viewed_forms:
                continue

            photos_object = get_all_user_photos(user_object["id"])
            if photos_object is None:
                continue

            if photos_object["count"] < 3:
                continue
 
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
            photo_dict = {}
            if photos_object["count"] > 100:
                photos_object["count"] = 100
            for i in range(photos_object["count"]):
                try:
                    photo_likes = photos_object["items"][i]["likes"]["count"]
                    photo_dict[
                        photo_likes
                    ] = f"photo{user_object['id']}_{photos_object['items'][i]['id']}"
                except KeyError:
                    break 

            if len(photo_dict) == 0:
                continue

            viewed_forms.append(finded_user_id)
            viewed_forms = [str(i) for i in viewed_forms]
            update_user(user_id, "viewed_forms", ','.join(viewed_forms))
            commit_db()

            attachment_list = ""

            for _ in range(3):
                attachment_list += f"{photo_dict[max(photo_dict)]},"
                photo_dict.pop(max(photo_dict))
 
            bot.answer(
                "üëç –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å!\n"
                "\n"
                f"üèµ [id{finded_user_id}|{first_name} {last_name}]\n"
                f"–°—Å—ã–ª–∫–∞: {finded_link}",
                attachment=str(attachment_list),
            )
            break
    else:
        bot.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VKinder!\n"
            "\n"
            'üëâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É - "–ø–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!',
        )

